<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{A5450559-05EE-4657-8EE7-5C3F74F1EDD2}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>MorseCode.Functional</RootNamespace>
    <AssemblyName>MorseCode.Functional</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <CodeContractsAssemblyMode>1</CodeContractsAssemblyMode>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <RunCodeAnalysis>true</RunCodeAnalysis>
    <CodeContractsEnableRuntimeChecking>True</CodeContractsEnableRuntimeChecking>
    <CodeContractsRuntimeOnlyPublicSurface>False</CodeContractsRuntimeOnlyPublicSurface>
    <CodeContractsRuntimeThrowOnFailure>True</CodeContractsRuntimeThrowOnFailure>
    <CodeContractsRuntimeCallSiteRequires>False</CodeContractsRuntimeCallSiteRequires>
    <CodeContractsRuntimeSkipQuantifiers>False</CodeContractsRuntimeSkipQuantifiers>
    <CodeContractsRunCodeAnalysis>True</CodeContractsRunCodeAnalysis>
    <CodeContractsNonNullObligations>True</CodeContractsNonNullObligations>
    <CodeContractsBoundsObligations>True</CodeContractsBoundsObligations>
    <CodeContractsArithmeticObligations>True</CodeContractsArithmeticObligations>
    <CodeContractsEnumObligations>True</CodeContractsEnumObligations>
    <CodeContractsRedundantAssumptions>True</CodeContractsRedundantAssumptions>
    <CodeContractsAssertsToContractsCheckBox>True</CodeContractsAssertsToContractsCheckBox>
    <CodeContractsRedundantTests>True</CodeContractsRedundantTests>
    <CodeContractsMissingPublicRequiresAsWarnings>True</CodeContractsMissingPublicRequiresAsWarnings>
    <CodeContractsMissingPublicEnsuresAsWarnings>False</CodeContractsMissingPublicEnsuresAsWarnings>
    <CodeContractsInferRequires>True</CodeContractsInferRequires>
    <CodeContractsInferEnsures>False</CodeContractsInferEnsures>
    <CodeContractsInferObjectInvariants>False</CodeContractsInferObjectInvariants>
    <CodeContractsSuggestAssumptions>False</CodeContractsSuggestAssumptions>
    <CodeContractsSuggestAssumptionsForCallees>False</CodeContractsSuggestAssumptionsForCallees>
    <CodeContractsSuggestRequires>False</CodeContractsSuggestRequires>
    <CodeContractsNecessaryEnsures>True</CodeContractsNecessaryEnsures>
    <CodeContractsSuggestObjectInvariants>False</CodeContractsSuggestObjectInvariants>
    <CodeContractsSuggestReadonly>True</CodeContractsSuggestReadonly>
    <CodeContractsRunInBackground>True</CodeContractsRunInBackground>
    <CodeContractsShowSquigglies>True</CodeContractsShowSquigglies>
    <CodeContractsUseBaseLine>False</CodeContractsUseBaseLine>
    <CodeContractsEmitXMLDocs>True</CodeContractsEmitXMLDocs>
    <CodeContractsCustomRewriterAssembly />
    <CodeContractsCustomRewriterClass />
    <CodeContractsLibPaths />
    <CodeContractsExtraRewriteOptions />
    <CodeContractsExtraAnalysisOptions />
    <CodeContractsSQLServerOption />
    <CodeContractsBaseLineFile />
    <CodeContractsCacheAnalysisResults>True</CodeContractsCacheAnalysisResults>
    <CodeContractsSkipAnalysisIfCannotConnectToCache>False</CodeContractsSkipAnalysisIfCannotConnectToCache>
    <CodeContractsFailBuildOnWarnings>False</CodeContractsFailBuildOnWarnings>
    <CodeContractsBeingOptimisticOnExternal>True</CodeContractsBeingOptimisticOnExternal>
    <CodeContractsRuntimeCheckingLevel>Full</CodeContractsRuntimeCheckingLevel>
    <CodeContractsReferenceAssembly>Build</CodeContractsReferenceAssembly>
    <CodeContractsAnalysisWarningLevel>3</CodeContractsAnalysisWarningLevel>
    <DocumentationFile>bin\Debug\MorseCode.Functional.XML</DocumentationFile>
    <CodeContractsInferEnsuresAutoProperties>True</CodeContractsInferEnsuresAutoProperties>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <RunCodeAnalysis>true</RunCodeAnalysis>
    <CodeContractsEnableRuntimeChecking>True</CodeContractsEnableRuntimeChecking>
    <CodeContractsRuntimeOnlyPublicSurface>False</CodeContractsRuntimeOnlyPublicSurface>
    <CodeContractsRuntimeThrowOnFailure>True</CodeContractsRuntimeThrowOnFailure>
    <CodeContractsRuntimeCallSiteRequires>False</CodeContractsRuntimeCallSiteRequires>
    <CodeContractsRuntimeSkipQuantifiers>False</CodeContractsRuntimeSkipQuantifiers>
    <CodeContractsRunCodeAnalysis>True</CodeContractsRunCodeAnalysis>
    <CodeContractsNonNullObligations>True</CodeContractsNonNullObligations>
    <CodeContractsBoundsObligations>True</CodeContractsBoundsObligations>
    <CodeContractsArithmeticObligations>True</CodeContractsArithmeticObligations>
    <CodeContractsEnumObligations>True</CodeContractsEnumObligations>
    <CodeContractsRedundantAssumptions>True</CodeContractsRedundantAssumptions>
    <CodeContractsAssertsToContractsCheckBox>True</CodeContractsAssertsToContractsCheckBox>
    <CodeContractsRedundantTests>True</CodeContractsRedundantTests>
    <CodeContractsMissingPublicRequiresAsWarnings>True</CodeContractsMissingPublicRequiresAsWarnings>
    <CodeContractsMissingPublicEnsuresAsWarnings>False</CodeContractsMissingPublicEnsuresAsWarnings>
    <CodeContractsInferRequires>True</CodeContractsInferRequires>
    <CodeContractsInferEnsures>False</CodeContractsInferEnsures>
    <CodeContractsInferObjectInvariants>False</CodeContractsInferObjectInvariants>
    <CodeContractsSuggestAssumptions>False</CodeContractsSuggestAssumptions>
    <CodeContractsSuggestAssumptionsForCallees>False</CodeContractsSuggestAssumptionsForCallees>
    <CodeContractsSuggestRequires>False</CodeContractsSuggestRequires>
    <CodeContractsNecessaryEnsures>True</CodeContractsNecessaryEnsures>
    <CodeContractsSuggestObjectInvariants>False</CodeContractsSuggestObjectInvariants>
    <CodeContractsSuggestReadonly>True</CodeContractsSuggestReadonly>
    <CodeContractsRunInBackground>True</CodeContractsRunInBackground>
    <CodeContractsShowSquigglies>True</CodeContractsShowSquigglies>
    <CodeContractsUseBaseLine>False</CodeContractsUseBaseLine>
    <CodeContractsEmitXMLDocs>True</CodeContractsEmitXMLDocs>
    <CodeContractsCustomRewriterAssembly />
    <CodeContractsCustomRewriterClass />
    <CodeContractsLibPaths />
    <CodeContractsExtraRewriteOptions />
    <CodeContractsExtraAnalysisOptions />
    <CodeContractsSQLServerOption />
    <CodeContractsBaseLineFile />
    <CodeContractsCacheAnalysisResults>True</CodeContractsCacheAnalysisResults>
    <CodeContractsSkipAnalysisIfCannotConnectToCache>False</CodeContractsSkipAnalysisIfCannotConnectToCache>
    <CodeContractsFailBuildOnWarnings>False</CodeContractsFailBuildOnWarnings>
    <CodeContractsBeingOptimisticOnExternal>True</CodeContractsBeingOptimisticOnExternal>
    <CodeContractsRuntimeCheckingLevel>Full</CodeContractsRuntimeCheckingLevel>
    <CodeContractsReferenceAssembly>Build</CodeContractsReferenceAssembly>
    <CodeContractsAnalysisWarningLevel>3</CodeContractsAnalysisWarningLevel>
    <DocumentationFile>bin\Release\MorseCode.Functional.XML</DocumentationFile>
  </PropertyGroup>
  <PropertyGroup>
    <SignAssembly>true</SignAssembly>
  </PropertyGroup>
  <PropertyGroup>
    <AssemblyOriginatorKeyFile>..\MorseCode.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="MorseCode.BetterReflection, Version=1.0.11.0, Culture=neutral, PublicKeyToken=214321fcab92c5da, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\MorseCode.BetterReflection.1.0.11.0\lib\net45\MorseCode.BetterReflection.dll</HintPath>
    </Reference>
    <Reference Include="MorseCode.FrameworkExtensions, Version=1.0.27.0, Culture=neutral, PublicKeyToken=214321fcab92c5da, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\packages\MorseCode.FrameworkExtensions.1.0.27.0\lib\net45\MorseCode.FrameworkExtensions.dll</HintPath>
    </Reference>
    <Reference Include="MorseCode.ITask">
      <HintPath>..\packages\MorseCode.ITask.1.0.29.0\lib\net45\MorseCode.ITask.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="ComposeExtensionMethod.cs">
      <DependentUpon>ComposeExtensionMethod.tt</DependentUpon>
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
    </Compile>
    <Compile Include="VariantFlattenExtensionMethods.cs">
      <DependentUpon>VariantFlattenExtensionMethods.tt</DependentUpon>
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
    </Compile>
    <Compile Include="IVariantWithCommon{T}.cs" />
    <Compile Include="VariantCreateNewExtensionMethods.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>VariantCreateNewExtensionMethods.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantInterfaceContract.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>VariantInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8}.cs">
      <DependentUpon>IVariantWithCommon.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7}.cs">
      <DependentUpon>IVariantWithCommon.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6}.cs">
      <DependentUpon>IVariantWithCommon.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariantWithCommon{T,T1,T2,T3,T4,T5}.cs">
      <DependentUpon>IVariantWithCommon.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariantWithCommon{T,T1,T2,T3,T4}.cs">
      <DependentUpon>IVariantWithCommon.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariantWithCommon{T,T1,T2,T3}.cs">
      <DependentUpon>IVariantWithCommon.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariantWithCommon{T,T1,T2}.cs">
      <DependentUpon>IVariantWithCommon.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantInterfaceContract{T1,T2,T3,T4,T5,T6,T7,T8}.cs">
      <DependentUpon>VariantInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantInterfaceContract{T1,T2,T3,T4,T5,T6,T7}.cs">
      <DependentUpon>VariantInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantInterfaceContract{T1,T2,T3,T4,T5,T6}.cs">
      <DependentUpon>VariantInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantInterfaceContract{T1,T2,T3,T4,T5}.cs">
      <DependentUpon>VariantInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantInterfaceContract{T1,T2,T3,T4}.cs">
      <DependentUpon>VariantInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantInterfaceContract{T1,T2,T3}.cs">
      <DependentUpon>VariantInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantInterfaceContract{T1,T2}.cs">
      <DependentUpon>VariantInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantWithCommonInterfaceContract.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>VariantWithCommonInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariantWithCommon.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>IVariantWithCommon.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariant.cs">
      <DependentUpon>IVariant.tt</DependentUpon>
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
    </Compile>
    <Compile Include="IVariant{T1,T2,T3,T4,T5,T6,T7,T8}.cs">
      <DependentUpon>IVariant.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariant{T1,T2,T3,T4,T5,T6,T7}.cs">
      <DependentUpon>IVariant.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariant{T1,T2,T3,T4,T5,T6}.cs">
      <DependentUpon>IVariant.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariant{T1,T2,T3,T4,T5}.cs">
      <DependentUpon>IVariant.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariant{T1,T2,T3,T4}.cs">
      <DependentUpon>IVariant.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariant{T1,T2,T3}.cs">
      <DependentUpon>IVariant.tt</DependentUpon>
    </Compile>
    <Compile Include="IVariant{T1,T2}.cs">
      <DependentUpon>IVariant.tt</DependentUpon>
    </Compile>
    <Compile Include="PartiallyApplyExtensionMethod.cs">
      <DependentUpon>PartiallyApplyExtensionMethod.tt</DependentUpon>
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
    </Compile>
    <Compile Include="DecurryExtensionMethod.cs">
      <DependentUpon>DecurryExtensionMethod.tt</DependentUpon>
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
    </Compile>
    <Compile Include="CurryExtensionMethod.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>CurryExtensionMethod.tt</DependentUpon>
    </Compile>
    <Compile Include="MaybeMonad.cs" />
    <Compile Include="FlipExtensionMethod.cs" />
    <Compile Include="IMaybe{T}.cs" />
    <Compile Include="Maybe.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Variant.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Variant.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantWithCommonInterfaceContract{T,T1,T2,T3,T4,T5,T6,T7,T8}.cs">
      <DependentUpon>VariantWithCommonInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantWithCommonInterfaceContract{T,T1,T2,T3,T4,T5,T6,T7}.cs">
      <DependentUpon>VariantWithCommonInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantWithCommonInterfaceContract{T,T1,T2,T3,T4,T5,T6}.cs">
      <DependentUpon>VariantWithCommonInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantWithCommonInterfaceContract{T,T1,T2,T3,T4,T5}.cs">
      <DependentUpon>VariantWithCommonInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantWithCommonInterfaceContract{T,T1,T2,T3,T4}.cs">
      <DependentUpon>VariantWithCommonInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantWithCommonInterfaceContract{T,T1,T2,T3}.cs">
      <DependentUpon>VariantWithCommonInterfaceContract.tt</DependentUpon>
    </Compile>
    <Compile Include="VariantWithCommonInterfaceContract{T,T1,T2}.cs">
      <DependentUpon>VariantWithCommonInterfaceContract.tt</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <CodeAnalysisDictionary Include="..\CustomDictionary.xml">
      <Link>CustomDictionary.xml</Link>
    </CodeAnalysisDictionary>
  </ItemGroup>
  <ItemGroup>
    <None Include="..\MorseCode.snk">
      <Link>MorseCode.snk</Link>
    </None>
    <None Include="app.config" />
    <None Include="ComposeExtensionMethod.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>ComposeExtensionMethod.cs</LastGenOutput>
    </None>
    <None Include="VariantFlattenExtensionMethods.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>VariantFlattenExtensionMethods.cs</LastGenOutput>
    </None>
    <None Include="VariantCreateNewExtensionMethods.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>VariantCreateNewExtensionMethods.cs</LastGenOutput>
    </None>
    <None Include="VariantInterfaceContract.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>VariantInterfaceContract.cs</LastGenOutput>
    </None>
    <None Include="VariantWithCommonInterfaceContract.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>VariantWithCommonInterfaceContract.cs</LastGenOutput>
    </None>
    <None Include="IVariantWithCommon.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>IVariantWithCommon.cs</LastGenOutput>
    </None>
    <None Include="IVariant.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>IVariant.cs</LastGenOutput>
    </None>
    <None Include="PartiallyApplyExtensionMethod.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>PartiallyApplyExtensionMethod.cs</LastGenOutput>
    </None>
    <None Include="DecurryExtensionMethod.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DecurryExtensionMethod.cs</LastGenOutput>
    </None>
    <None Include="CurryExtensionMethod.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>CurryExtensionMethod.cs</LastGenOutput>
    </None>
    <None Include="packages.config" />
    <None Include="TemplateFileManager.ttinclude" />
    <None Include="Utilities.ttinclude" />
    <None Include="Variant.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>Variant.cs</LastGenOutput>
    </None>
    <None Include="_Root.nuspec" />
  </ItemGroup>
  <ItemGroup>
    <Service Include="{508349B6-6B84-4DF5-91F0-309BEEBAD82D}" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>