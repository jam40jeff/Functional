<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="TemplateFileManager.ttinclude" #><#@ include file="Utilities.ttinclude" #><#@ output extension=".cs" #>
<#
TemplateFileManager manager = TemplateFileManager.Create(this);
for(int currentNumberOfParameters = 2; currentNumberOfParameters <= MaximumNumberOfParameters; currentNumberOfParameters++)
{
    manager.StartNewFile("VariantWithCommonInterfaceContract{T," + string.Join(",", Enumerable.Range(1, currentNumberOfParameters).Select(n => "T" + n)) + "}.cs");
#>
#region License

// --------------------------------------------------------------------------------------------------------------------
// <copyright file="VariantWithCommonInterfaceContract{T,<#= string.Join(",", Enumerable.Range(1, currentNumberOfParameters).Select(n => "T" + n)) #>}.cs" company="MorseCode Software">
// Copyright (c) 2015 MorseCode Software
// </copyright>
// <summary>
// The MIT License (MIT)
// 
// Copyright (c) 2015 MorseCode Software
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------
#endregion

namespace MorseCode.Functional
{
    using System;
    using System.Diagnostics.Contracts;

    [ContractClassFor(typeof(IVariantWithCommon<<#= string.Join(string.Empty, Enumerable.Range(1, currentNumberOfParameters).Select(_ => ",")) #>>))]
    internal abstract class VariantWithCommonInterfaceContract<T, <#= string.Join(", ", Enumerable.Range(1, currentNumberOfParameters).Select(n => "T" + n)) #>> : IVariantWithCommon<T, <#= string.Join(", ", Enumerable.Range(1, currentNumberOfParameters).Select(n => "T" + n)) #>>
<# Enumerable.Range(1, currentNumberOfParameters).ToList().ForEach(n => {#>
        where T<#= n #> : T
<# }); #>
    {
        #region Explicit Interface Properties

        T IVariantWithCommon<T>.Value
        {
            get
            {
                return default(T);
            }
        }

        #endregion

        #region Explicit Interface Methods

        void IVariantWithCommon<T, <#= string.Join(", ", Enumerable.Range(1, currentNumberOfParameters).Select(n => "T" + n)) #>>.Match(<#= string.Join(", ", Enumerable.Range(1, currentNumberOfParameters).Select(n => "Action<T" + n + "> " + GetOrdinalString(n))) #>)
        {
<# Enumerable.Range(1, currentNumberOfParameters).ToList().ForEach(n => {#>
            Contract.Requires<ArgumentNullException>(<#= GetOrdinalString(n) #> != null, "<#= GetOrdinalString(n) #>");
<# }); #>
        }

        TResult IVariantWithCommon<T, <#= string.Join(", ", Enumerable.Range(1, currentNumberOfParameters).Select(n => "T" + n)) #>>.Match<TResult>(<#= string.Join(", ", Enumerable.Range(1, currentNumberOfParameters).Select(n => "Func<T" + n + ", TResult> " + GetOrdinalString(n))) #>)
        {
<# Enumerable.Range(1, currentNumberOfParameters).ToList().ForEach(n => {#>
            Contract.Requires<ArgumentNullException>(<#= GetOrdinalString(n) #> != null, "<#= GetOrdinalString(n) #>");
<# }); #>

            return default(TResult);
        }

        void IVariantWithCommon<T, <#= string.Join(", ", Enumerable.Range(1, currentNumberOfParameters).Select(n => "T" + n)) #>>.MatchSome(Action otherwise, <#= string.Join(", ", Enumerable.Range(1, currentNumberOfParameters).Select(n => "Action<T" + n + "> " + GetOrdinalString(n))) #>)
        {
            Contract.Requires<ArgumentNullException>(otherwise != null, "otherwise");
        }

        TResult IVariantWithCommon<T, <#= string.Join(", ", Enumerable.Range(1, currentNumberOfParameters).Select(n => "T" + n)) #>>.MatchSome<TResult>(Func<TResult> otherwise, <#= string.Join(", ", Enumerable.Range(1, currentNumberOfParameters).Select(n => "Func<T" + n + ", TResult> " + GetOrdinalString(n))) #>)
        {
            Contract.Requires<ArgumentNullException>(otherwise != null, "otherwise");

            return default(TResult);
        }

        #endregion
    }
}<#
}
manager.Process();
#>