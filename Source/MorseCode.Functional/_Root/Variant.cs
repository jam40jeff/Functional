#region License

// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Variant.cs" company="MorseCode Software">
// Copyright (c) 2015 MorseCode Software
// </copyright>
// <summary>
// The MIT License (MIT)
// 
// Copyright (c) 2015 MorseCode Software
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------
#endregion

namespace MorseCode.Functional
{
    using System;
    using System.Diagnostics.Contracts;

    /// <summary>
    /// A factory class for creating variant (or discriminated union) instances.
    /// </summary>
    public static class Variant
    {
        #region Public Methods and Operators

        /// <summary>
        /// Creates a variant (or discriminated union) with two possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2> FirstWithCommon<T, T1, T2>(T1 value)
            where T1 : T
            where T2 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with two possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2> SecondWithCommon<T, T1, T2>(T2 value)
            where T1 : T
            where T2 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with three possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3> FirstWithCommon<T, T1, T2, T3>(T1 value)
            where T1 : T
            where T2 : T
            where T3 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2, T3>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with three possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3> SecondWithCommon<T, T1, T2, T3>(T2 value)
            where T1 : T
            where T2 : T
            where T3 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2, T3>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with three possible values with a common type
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3> ThirdWithCommon<T, T1, T2, T3>(T3 value)
            where T1 : T
            where T2 : T
            where T3 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3>>() != null);

            return new VariantWithCommonClassWithThird<T, T1, T2, T3>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with four possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4> FirstWithCommon<T, T1, T2, T3, T4>(T1 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2, T3, T4>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with four possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4> SecondWithCommon<T, T1, T2, T3, T4>(T2 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2, T3, T4>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with four possible values with a common type
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4> ThirdWithCommon<T, T1, T2, T3, T4>(T3 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4>>() != null);

            return new VariantWithCommonClassWithThird<T, T1, T2, T3, T4>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with four possible values with a common type
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4> FourthWithCommon<T, T1, T2, T3, T4>(T4 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4>>() != null);

            return new VariantWithCommonClassWithFourth<T, T1, T2, T3, T4>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with five possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5> FirstWithCommon<T, T1, T2, T3, T4, T5>(T1 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with five possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5> SecondWithCommon<T, T1, T2, T3, T4, T5>(T2 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with five possible values with a common type
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5> ThirdWithCommon<T, T1, T2, T3, T4, T5>(T3 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5>>() != null);

            return new VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with five possible values with a common type
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5> FourthWithCommon<T, T1, T2, T3, T4, T5>(T4 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5>>() != null);

            return new VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with five possible values with a common type
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5> FifthWithCommon<T, T1, T2, T3, T4, T5>(T5 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5>>() != null);

            return new VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with six possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6> FirstWithCommon<T, T1, T2, T3, T4, T5, T6>(T1 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with six possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6> SecondWithCommon<T, T1, T2, T3, T4, T5, T6>(T2 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with six possible values with a common type
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6> ThirdWithCommon<T, T1, T2, T3, T4, T5, T6>(T3 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>>() != null);

            return new VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with six possible values with a common type
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6> FourthWithCommon<T, T1, T2, T3, T4, T5, T6>(T4 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>>() != null);

            return new VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with six possible values with a common type
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6> FifthWithCommon<T, T1, T2, T3, T4, T5, T6>(T5 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>>() != null);

            return new VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with six possible values with a common type
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6> SixthWithCommon<T, T1, T2, T3, T4, T5, T6>(T6 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>>() != null);

            return new VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with seven possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7> FirstWithCommon<T, T1, T2, T3, T4, T5, T6, T7>(T1 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with seven possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7> SecondWithCommon<T, T1, T2, T3, T4, T5, T6, T7>(T2 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with seven possible values with a common type
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7> ThirdWithCommon<T, T1, T2, T3, T4, T5, T6, T7>(T3 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>>() != null);

            return new VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with seven possible values with a common type
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7> FourthWithCommon<T, T1, T2, T3, T4, T5, T6, T7>(T4 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>>() != null);

            return new VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with seven possible values with a common type
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7> FifthWithCommon<T, T1, T2, T3, T4, T5, T6, T7>(T5 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>>() != null);

            return new VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with seven possible values with a common type
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7> SixthWithCommon<T, T1, T2, T3, T4, T5, T6, T7>(T6 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>>() != null);

            return new VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with seven possible values with a common type
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7> SeventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7>(T7 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>>() != null);

            return new VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8> FirstWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>(T1 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8> SecondWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>(T2 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values with a common type
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8> ThirdWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>(T3 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values with a common type
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8> FourthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>(T4 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values with a common type
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8> FifthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>(T5 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values with a common type
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8> SixthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>(T6 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values with a common type
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8> SeventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>(T7 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values with a common type
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8> EighthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>(T8 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> FirstWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> SecondWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(T2 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values with a common type
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> ThirdWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(T3 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values with a common type
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> FourthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(T4 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values with a common type
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> FifthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(T5 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values with a common type
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> SixthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(T6 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values with a common type
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> SeventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(T7 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values with a common type
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> EighthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(T8 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values with a common type
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> NinthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(T9 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FirstWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T1 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SecondWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T2 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values with a common type
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ThirdWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T3 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values with a common type
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FourthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T4 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values with a common type
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FifthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T5 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values with a common type
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SixthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T6 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values with a common type
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> SeventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T7 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values with a common type
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> EighthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T8 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values with a common type
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> NinthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T9 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values with a common type
        /// holding a value of the tenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the tenth possible variant value (of type <typeparamref name="T10"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> TenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T10 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantWithCommonClassWithTenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FirstWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T1 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SecondWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T2 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values with a common type
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ThirdWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T3 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values with a common type
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FourthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T4 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values with a common type
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FifthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T5 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values with a common type
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SixthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T6 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values with a common type
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> SeventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T7 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values with a common type
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> EighthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T8 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values with a common type
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> NinthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T9 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values with a common type
        /// holding a value of the tenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the tenth possible variant value (of type <typeparamref name="T10"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> TenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T10 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantWithCommonClassWithTenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values with a common type
        /// holding a value of the eleventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the eleventh possible variant value (of type <typeparamref name="T11"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> EleventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T11 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantWithCommonClassWithEleventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FirstWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T1 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SecondWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T2 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values with a common type
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ThirdWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T3 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values with a common type
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FourthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T4 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values with a common type
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FifthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T5 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values with a common type
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SixthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T6 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values with a common type
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> SeventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T7 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values with a common type
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> EighthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T8 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values with a common type
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> NinthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T9 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values with a common type
        /// holding a value of the tenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the tenth possible variant value (of type <typeparamref name="T10"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> TenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T10 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantWithCommonClassWithTenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values with a common type
        /// holding a value of the eleventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the eleventh possible variant value (of type <typeparamref name="T11"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> EleventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T11 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantWithCommonClassWithEleventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values with a common type
        /// holding a value of the twelfth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the twelfth possible variant value (of type <typeparamref name="T12"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> TwelfthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T12 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantWithCommonClassWithTwelfth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FirstWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T1 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SecondWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T2 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values with a common type
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ThirdWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T3 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values with a common type
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FourthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T4 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values with a common type
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FifthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T5 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values with a common type
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SixthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T6 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values with a common type
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> SeventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T7 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values with a common type
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> EighthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T8 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values with a common type
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> NinthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T9 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values with a common type
        /// holding a value of the tenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the tenth possible variant value (of type <typeparamref name="T10"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> TenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T10 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantWithCommonClassWithTenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values with a common type
        /// holding a value of the eleventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the eleventh possible variant value (of type <typeparamref name="T11"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> EleventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T11 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantWithCommonClassWithEleventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values with a common type
        /// holding a value of the twelfth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the twelfth possible variant value (of type <typeparamref name="T12"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> TwelfthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T12 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantWithCommonClassWithTwelfth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values with a common type
        /// holding a value of the thirteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the thirteenth possible variant value (of type <typeparamref name="T13"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ThirteenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T13 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantWithCommonClassWithThirteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FirstWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T1 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SecondWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T2 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values with a common type
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ThirdWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T3 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values with a common type
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FourthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T4 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values with a common type
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FifthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T5 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values with a common type
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SixthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T6 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values with a common type
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> SeventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T7 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values with a common type
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> EighthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T8 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values with a common type
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> NinthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T9 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values with a common type
        /// holding a value of the tenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the tenth possible variant value (of type <typeparamref name="T10"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> TenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T10 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantWithCommonClassWithTenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values with a common type
        /// holding a value of the eleventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the eleventh possible variant value (of type <typeparamref name="T11"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> EleventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T11 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantWithCommonClassWithEleventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values with a common type
        /// holding a value of the twelfth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the twelfth possible variant value (of type <typeparamref name="T12"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> TwelfthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T12 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantWithCommonClassWithTwelfth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values with a common type
        /// holding a value of the thirteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the thirteenth possible variant value (of type <typeparamref name="T13"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ThirteenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T13 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantWithCommonClassWithThirteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values with a common type
        /// holding a value of the fourteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the fourteenth possible variant value (of type <typeparamref name="T14"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FourteenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T14 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantWithCommonClassWithFourteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FirstWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T1 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SecondWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T2 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ThirdWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T3 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FourthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T4 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FifthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T5 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SixthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T6 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> SeventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T7 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> EighthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T8 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> NinthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T9 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the tenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the tenth possible variant value (of type <typeparamref name="T10"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> TenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T10 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithTenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the eleventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the eleventh possible variant value (of type <typeparamref name="T11"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> EleventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T11 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithEleventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the twelfth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the twelfth possible variant value (of type <typeparamref name="T12"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> TwelfthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T12 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithTwelfth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the thirteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the thirteenth possible variant value (of type <typeparamref name="T13"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ThirteenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T13 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithThirteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the fourteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the fourteenth possible variant value (of type <typeparamref name="T14"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FourteenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T14 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithFourteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values with a common type
        /// holding a value of the fifteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the fifteenth possible variant value (of type <typeparamref name="T15"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FifteenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T15 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantWithCommonClassWithFifteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FirstWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T1 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SecondWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T2 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ThirdWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T3 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FourthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T4 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FifthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T5 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SixthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T6 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SeventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T7 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> EighthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T8 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> NinthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T9 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the tenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the tenth possible variant value (of type <typeparamref name="T10"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> TenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T10 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithTenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the eleventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the eleventh possible variant value (of type <typeparamref name="T11"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> EleventhWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T11 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithEleventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the twelfth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the twelfth possible variant value (of type <typeparamref name="T12"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> TwelfthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T12 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithTwelfth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the thirteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the thirteenth possible variant value (of type <typeparamref name="T13"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ThirteenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T13 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithThirteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the fourteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the fourteenth possible variant value (of type <typeparamref name="T14"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FourteenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T14 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithFourteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the fifteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the fifteenth possible variant value (of type <typeparamref name="T15"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FifteenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T15 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithFifteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values with a common type
        /// holding a value of the sixteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T">
        /// The common type all possible values of the variant (or discriminated union) inherit from or implement.
        /// </typeparam>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariantWithCommon{T,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the sixteenth possible variant value (of type <typeparamref name="T16"/>).
        /// </returns>
        public static IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> SixteenthWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T16 value)
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            Contract.Ensures(Contract.Result<IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantWithCommonClassWithSixteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with two possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2> First<T1, T2>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2>>() != null);

            return new VariantClassWithFirst<T1, T2>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with two possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2> Second<T1, T2>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2>>() != null);

            return new VariantClassWithSecond<T1, T2>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with three possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2, T3> First<T1, T2, T3>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3>>() != null);

            return new VariantClassWithFirst<T1, T2, T3>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with three possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2, T3> Second<T1, T2, T3>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3>>() != null);

            return new VariantClassWithSecond<T1, T2, T3>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with three possible values
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariant<T1, T2, T3> Third<T1, T2, T3>(T3 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3>>() != null);

            return new VariantClassWithThird<T1, T2, T3>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with four possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4> First<T1, T2, T3, T4>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4>>() != null);

            return new VariantClassWithFirst<T1, T2, T3, T4>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with four possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4> Second<T1, T2, T3, T4>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4>>() != null);

            return new VariantClassWithSecond<T1, T2, T3, T4>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with four possible values
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4> Third<T1, T2, T3, T4>(T3 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4>>() != null);

            return new VariantClassWithThird<T1, T2, T3, T4>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with four possible values
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4> Fourth<T1, T2, T3, T4>(T4 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4>>() != null);

            return new VariantClassWithFourth<T1, T2, T3, T4>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with five possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5> First<T1, T2, T3, T4, T5>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5>>() != null);

            return new VariantClassWithFirst<T1, T2, T3, T4, T5>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with five possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5> Second<T1, T2, T3, T4, T5>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5>>() != null);

            return new VariantClassWithSecond<T1, T2, T3, T4, T5>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with five possible values
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5> Third<T1, T2, T3, T4, T5>(T3 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5>>() != null);

            return new VariantClassWithThird<T1, T2, T3, T4, T5>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with five possible values
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5> Fourth<T1, T2, T3, T4, T5>(T4 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5>>() != null);

            return new VariantClassWithFourth<T1, T2, T3, T4, T5>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with five possible values
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5> Fifth<T1, T2, T3, T4, T5>(T5 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5>>() != null);

            return new VariantClassWithFifth<T1, T2, T3, T4, T5>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with six possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6> First<T1, T2, T3, T4, T5, T6>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6>>() != null);

            return new VariantClassWithFirst<T1, T2, T3, T4, T5, T6>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with six possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6> Second<T1, T2, T3, T4, T5, T6>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6>>() != null);

            return new VariantClassWithSecond<T1, T2, T3, T4, T5, T6>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with six possible values
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6> Third<T1, T2, T3, T4, T5, T6>(T3 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6>>() != null);

            return new VariantClassWithThird<T1, T2, T3, T4, T5, T6>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with six possible values
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6> Fourth<T1, T2, T3, T4, T5, T6>(T4 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6>>() != null);

            return new VariantClassWithFourth<T1, T2, T3, T4, T5, T6>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with six possible values
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6> Fifth<T1, T2, T3, T4, T5, T6>(T5 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6>>() != null);

            return new VariantClassWithFifth<T1, T2, T3, T4, T5, T6>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with six possible values
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6> Sixth<T1, T2, T3, T4, T5, T6>(T6 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6>>() != null);

            return new VariantClassWithSixth<T1, T2, T3, T4, T5, T6>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with seven possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7> First<T1, T2, T3, T4, T5, T6, T7>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7>>() != null);

            return new VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with seven possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7> Second<T1, T2, T3, T4, T5, T6, T7>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7>>() != null);

            return new VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with seven possible values
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7> Third<T1, T2, T3, T4, T5, T6, T7>(T3 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7>>() != null);

            return new VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with seven possible values
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7> Fourth<T1, T2, T3, T4, T5, T6, T7>(T4 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7>>() != null);

            return new VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with seven possible values
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7> Fifth<T1, T2, T3, T4, T5, T6, T7>(T5 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7>>() != null);

            return new VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with seven possible values
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7> Sixth<T1, T2, T3, T4, T5, T6, T7>(T6 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7>>() != null);

            return new VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with seven possible values
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7> Seventh<T1, T2, T3, T4, T5, T6, T7>(T7 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7>>() != null);

            return new VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8> First<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8> Second<T1, T2, T3, T4, T5, T6, T7, T8>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8> Third<T1, T2, T3, T4, T5, T6, T7, T8>(T3 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8> Fourth<T1, T2, T3, T4, T5, T6, T7, T8>(T4 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8> Fifth<T1, T2, T3, T4, T5, T6, T7, T8>(T5 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8> Sixth<T1, T2, T3, T4, T5, T6, T7, T8>(T6 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8> Seventh<T1, T2, T3, T4, T5, T6, T7, T8>(T7 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eight possible values
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8> Eighth<T1, T2, T3, T4, T5, T6, T7, T8>(T8 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8>>() != null);

            return new VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9> First<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9> Second<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9> Third<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T3 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9> Fourth<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T4 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9> Fifth<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T5 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9> Sixth<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T6 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9> Seventh<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T7 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9> Eighth<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T8 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with nine possible values
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9> Ninth<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T9 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>>() != null);

            return new VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> First<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Second<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Third<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T3 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Fourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T4 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Fifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T5 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Sixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T6 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Seventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T7 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Eighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T8 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Ninth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T9 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with ten possible values
        /// holding a value of the tenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10}"/> holding a value of the tenth possible variant value (of type <typeparamref name="T10"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Tenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T10 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>() != null);

            return new VariantClassWithTenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> First<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Second<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Third<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T3 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Fourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T4 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Fifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T5 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Sixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T6 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Seventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T7 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Eighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T8 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Ninth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T9 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values
        /// holding a value of the tenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the tenth possible variant value (of type <typeparamref name="T10"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T10 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantClassWithTenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with eleven possible values
        /// holding a value of the eleventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11}"/> holding a value of the eleventh possible variant value (of type <typeparamref name="T11"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Eleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T11 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>() != null);

            return new VariantClassWithEleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> First<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Second<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Third<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T3 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Fourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T4 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Fifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T5 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Sixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T6 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Seventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T7 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Eighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T8 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Ninth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T9 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values
        /// holding a value of the tenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the tenth possible variant value (of type <typeparamref name="T10"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T10 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantClassWithTenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values
        /// holding a value of the eleventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the eleventh possible variant value (of type <typeparamref name="T11"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Eleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T11 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantClassWithEleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with twelve possible values
        /// holding a value of the twelfth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12}"/> holding a value of the twelfth possible variant value (of type <typeparamref name="T12"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Twelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T12 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>() != null);

            return new VariantClassWithTwelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> First<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Second<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Third<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T3 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Fourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T4 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Fifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T5 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Sixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T6 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Seventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T7 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Eighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T8 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Ninth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T9 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values
        /// holding a value of the tenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the tenth possible variant value (of type <typeparamref name="T10"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T10 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantClassWithTenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values
        /// holding a value of the eleventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the eleventh possible variant value (of type <typeparamref name="T11"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Eleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T11 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantClassWithEleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values
        /// holding a value of the twelfth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the twelfth possible variant value (of type <typeparamref name="T12"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Twelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T12 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantClassWithTwelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with thirteen possible values
        /// holding a value of the thirteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13}"/> holding a value of the thirteenth possible variant value (of type <typeparamref name="T13"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Thirteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T13 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>() != null);

            return new VariantClassWithThirteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> First<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Second<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Third<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T3 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Fourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T4 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Fifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T5 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Sixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T6 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Seventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T7 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Eighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T8 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Ninth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T9 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values
        /// holding a value of the tenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the tenth possible variant value (of type <typeparamref name="T10"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Tenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T10 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantClassWithTenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values
        /// holding a value of the eleventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the eleventh possible variant value (of type <typeparamref name="T11"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Eleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T11 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantClassWithEleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values
        /// holding a value of the twelfth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the twelfth possible variant value (of type <typeparamref name="T12"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Twelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T12 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantClassWithTwelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values
        /// holding a value of the thirteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the thirteenth possible variant value (of type <typeparamref name="T13"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Thirteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T13 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantClassWithThirteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fourteen possible values
        /// holding a value of the fourteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14}"/> holding a value of the fourteenth possible variant value (of type <typeparamref name="T14"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Fourteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T14 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>() != null);

            return new VariantClassWithFourteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> First<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Second<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Third<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T3 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Fourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T4 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Fifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T5 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Sixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T6 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Seventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T7 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Eighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T8 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Ninth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T9 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the tenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the tenth possible variant value (of type <typeparamref name="T10"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Tenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T10 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithTenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the eleventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the eleventh possible variant value (of type <typeparamref name="T11"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Eleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T11 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithEleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the twelfth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the twelfth possible variant value (of type <typeparamref name="T12"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Twelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T12 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithTwelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the thirteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the thirteenth possible variant value (of type <typeparamref name="T13"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Thirteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T13 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithThirteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the fourteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the fourteenth possible variant value (of type <typeparamref name="T14"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Fourteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T14 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithFourteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with fifteen possible values
        /// holding a value of the fifteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15}"/> holding a value of the fifteenth possible variant value (of type <typeparamref name="T15"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Fifteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T15 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>() != null);

            return new VariantClassWithFifteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the first possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the first possible variant value (of type <typeparamref name="T1"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> First<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T1 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the second possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the second possible variant value (of type <typeparamref name="T2"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Second<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T2 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the third possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the third possible variant value (of type <typeparamref name="T3"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Third<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T3 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the fourth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the fourth possible variant value (of type <typeparamref name="T4"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Fourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T4 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the fifth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the fifth possible variant value (of type <typeparamref name="T5"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Fifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T5 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the sixth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the sixth possible variant value (of type <typeparamref name="T6"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Sixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T6 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the seventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the seventh possible variant value (of type <typeparamref name="T7"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Seventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T7 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the eighth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the eighth possible variant value (of type <typeparamref name="T8"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Eighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T8 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the ninth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the ninth possible variant value (of type <typeparamref name="T9"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Ninth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T9 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the tenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the tenth possible variant value (of type <typeparamref name="T10"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Tenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T10 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithTenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the eleventh possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the eleventh possible variant value (of type <typeparamref name="T11"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Eleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T11 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithEleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the twelfth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the twelfth possible variant value (of type <typeparamref name="T12"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Twelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T12 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithTwelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the thirteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the thirteenth possible variant value (of type <typeparamref name="T13"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Thirteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T13 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithThirteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the fourteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the fourteenth possible variant value (of type <typeparamref name="T14"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Fourteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T14 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithFourteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the fifteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the fifteenth possible variant value (of type <typeparamref name="T15"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Fifteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T15 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithFifteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        /// <summary>
        /// Creates a variant (or discriminated union) with sixteen possible values
        /// holding a value of the sixteenth possible variant value.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <typeparam name="T1">
        /// The type of the first possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T2">
        /// The type of the second possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T3">
        /// The type of the third possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T4">
        /// The type of the fourth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T5">
        /// The type of the fifth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T6">
        /// The type of the sixth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T7">
        /// The type of the seventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T8">
        /// The type of the eighth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T9">
        /// The type of the ninth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T10">
        /// The type of the tenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T11">
        /// The type of the eleventh possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T12">
        /// The type of the twelfth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T13">
        /// The type of the thirteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T14">
        /// The type of the fourteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T15">
        /// The type of the fifteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <typeparam name="T16">
        /// The type of the sixteenth possible value of the variant (or discriminated union).
        /// </typeparam>
        /// <returns>
        /// The <see cref="IVariant{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}"/> holding a value of the sixteenth possible variant value (of type <typeparamref name="T16"/>).
        /// </returns>
        public static IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Sixteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T16 value)
        {
            Contract.Ensures(Contract.Result<IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>() != null);

            return new VariantClassWithSixteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(value);
        }

        #endregion

        private class VariantWithCommonClassWithFirst<T, T1, T2> : IVariantWithCommon<T, T1, T2>
            where T1 : T
            where T2 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2>.Match(Action<T1> first, Action<T2> second)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2> : IVariantWithCommon<T, T1, T2>
            where T1 : T
            where T2 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2>.Match(Action<T1> first, Action<T2> second)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFirst<T, T1, T2, T3> : IVariantWithCommon<T, T1, T2, T3>
            where T1 : T
            where T2 : T
            where T3 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3>.Match(Action<T1> first, Action<T2> second, Action<T3> third)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2, T3> : IVariantWithCommon<T, T1, T2, T3>
            where T1 : T
            where T2 : T
            where T3 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3>.Match(Action<T1> first, Action<T2> second, Action<T3> third)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThird<T, T1, T2, T3> : IVariantWithCommon<T, T1, T2, T3>
            where T1 : T
            where T2 : T
            where T3 : T
        {
            #region Fields

            private readonly T3 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThird(T3 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3>.Match(Action<T1> first, Action<T2> second, Action<T3> third)
            {
                third(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third)
            {
                return third(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third)
            {
                if (third != null)
                {
                    third(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third)
            {
                if (third != null)
                {
                    return third(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFirst<T, T1, T2, T3, T4> : IVariantWithCommon<T, T1, T2, T3, T4>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2, T3, T4> : IVariantWithCommon<T, T1, T2, T3, T4>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThird<T, T1, T2, T3, T4> : IVariantWithCommon<T, T1, T2, T3, T4>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
        {
            #region Fields

            private readonly T3 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThird(T3 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth)
            {
                third(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth)
            {
                return third(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth)
            {
                if (third != null)
                {
                    third(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth)
            {
                if (third != null)
                {
                    return third(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourth<T, T1, T2, T3, T4> : IVariantWithCommon<T, T1, T2, T3, T4>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
        {
            #region Fields

            private readonly T4 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourth(T4 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth)
            {
                fourth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth)
            {
                return fourth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth)
            {
                if (fourth != null)
                {
                    fourth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth)
            {
                if (fourth != null)
                {
                    return fourth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5> : IVariantWithCommon<T, T1, T2, T3, T4, T5>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5> : IVariantWithCommon<T, T1, T2, T3, T4, T5>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5> : IVariantWithCommon<T, T1, T2, T3, T4, T5>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
        {
            #region Fields

            private readonly T3 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThird(T3 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth)
            {
                third(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth)
            {
                return third(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth)
            {
                if (third != null)
                {
                    third(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth)
            {
                if (third != null)
                {
                    return third(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5> : IVariantWithCommon<T, T1, T2, T3, T4, T5>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
        {
            #region Fields

            private readonly T4 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourth(T4 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth)
            {
                fourth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth)
            {
                return fourth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth)
            {
                if (fourth != null)
                {
                    fourth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth)
            {
                if (fourth != null)
                {
                    return fourth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5> : IVariantWithCommon<T, T1, T2, T3, T4, T5>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
        {
            #region Fields

            private readonly T5 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFifth(T5 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth)
            {
                fifth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth)
            {
                return fifth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth)
            {
                if (fifth != null)
                {
                    fifth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth)
            {
                if (fifth != null)
                {
                    return fifth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
        {
            #region Fields

            private readonly T3 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThird(T3 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth)
            {
                third(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth)
            {
                return third(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth)
            {
                if (third != null)
                {
                    third(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth)
            {
                if (third != null)
                {
                    return third(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
        {
            #region Fields

            private readonly T4 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourth(T4 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth)
            {
                fourth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth)
            {
                return fourth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth)
            {
                if (fourth != null)
                {
                    fourth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth)
            {
                if (fourth != null)
                {
                    return fourth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
        {
            #region Fields

            private readonly T5 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFifth(T5 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth)
            {
                fifth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth)
            {
                return fifth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth)
            {
                if (fifth != null)
                {
                    fifth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth)
            {
                if (fifth != null)
                {
                    return fifth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
        {
            #region Fields

            private readonly T6 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSixth(T6 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth)
            {
                sixth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth)
            {
                return sixth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth)
            {
                if (sixth != null)
                {
                    sixth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth)
            {
                if (sixth != null)
                {
                    return sixth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
        {
            #region Fields

            private readonly T3 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThird(T3 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh)
            {
                third(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh)
            {
                return third(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh)
            {
                if (third != null)
                {
                    third(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh)
            {
                if (third != null)
                {
                    return third(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
        {
            #region Fields

            private readonly T4 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourth(T4 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh)
            {
                fourth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh)
            {
                return fourth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh)
            {
                if (fourth != null)
                {
                    fourth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh)
            {
                if (fourth != null)
                {
                    return fourth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
        {
            #region Fields

            private readonly T5 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFifth(T5 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh)
            {
                fifth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh)
            {
                return fifth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh)
            {
                if (fifth != null)
                {
                    fifth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh)
            {
                if (fifth != null)
                {
                    return fifth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
        {
            #region Fields

            private readonly T6 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSixth(T6 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh)
            {
                sixth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh)
            {
                return sixth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh)
            {
                if (sixth != null)
                {
                    sixth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh)
            {
                if (sixth != null)
                {
                    return sixth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
        {
            #region Fields

            private readonly T7 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSeventh(T7 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh)
            {
                seventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh)
            {
                return seventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh)
            {
                if (seventh != null)
                {
                    seventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh)
            {
                if (seventh != null)
                {
                    return seventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            #region Fields

            private readonly T3 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThird(T3 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                third(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                return third(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                if (third != null)
                {
                    third(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                if (third != null)
                {
                    return third(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            #region Fields

            private readonly T4 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourth(T4 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                fourth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                return fourth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                if (fourth != null)
                {
                    fourth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                if (fourth != null)
                {
                    return fourth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            #region Fields

            private readonly T5 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFifth(T5 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                fifth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                return fifth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                if (fifth != null)
                {
                    fifth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                if (fifth != null)
                {
                    return fifth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            #region Fields

            private readonly T6 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSixth(T6 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                sixth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                return sixth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                if (sixth != null)
                {
                    sixth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                if (sixth != null)
                {
                    return sixth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            #region Fields

            private readonly T7 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSeventh(T7 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                seventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                return seventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                if (seventh != null)
                {
                    seventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                if (seventh != null)
                {
                    return seventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
        {
            #region Fields

            private readonly T8 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEighth(T8 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                eighth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                return eighth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth)
            {
                if (eighth != null)
                {
                    eighth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth)
            {
                if (eighth != null)
                {
                    return eighth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            #region Fields

            private readonly T3 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThird(T3 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                third(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                return third(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                if (third != null)
                {
                    third(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                if (third != null)
                {
                    return third(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            #region Fields

            private readonly T4 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourth(T4 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                fourth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                return fourth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                if (fourth != null)
                {
                    fourth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                if (fourth != null)
                {
                    return fourth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            #region Fields

            private readonly T5 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFifth(T5 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                fifth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                return fifth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                if (fifth != null)
                {
                    fifth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                if (fifth != null)
                {
                    return fifth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            #region Fields

            private readonly T6 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSixth(T6 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                sixth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                return sixth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                if (sixth != null)
                {
                    sixth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                if (sixth != null)
                {
                    return sixth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            #region Fields

            private readonly T7 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSeventh(T7 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                seventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                return seventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                if (seventh != null)
                {
                    seventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                if (seventh != null)
                {
                    return seventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            #region Fields

            private readonly T8 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEighth(T8 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                eighth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                return eighth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                if (eighth != null)
                {
                    eighth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                if (eighth != null)
                {
                    return eighth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
        {
            #region Fields

            private readonly T9 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithNinth(T9 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                ninth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                return ninth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth)
            {
                if (ninth != null)
                {
                    ninth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth)
            {
                if (ninth != null)
                {
                    return ninth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            #region Fields

            private readonly T3 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThird(T3 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                third(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                return third(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                if (third != null)
                {
                    third(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                if (third != null)
                {
                    return third(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            #region Fields

            private readonly T4 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourth(T4 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                fourth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                return fourth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                if (fourth != null)
                {
                    fourth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                if (fourth != null)
                {
                    return fourth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            #region Fields

            private readonly T5 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFifth(T5 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                fifth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                return fifth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                if (fifth != null)
                {
                    fifth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                if (fifth != null)
                {
                    return fifth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            #region Fields

            private readonly T6 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSixth(T6 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                sixth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                return sixth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                if (sixth != null)
                {
                    sixth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                if (sixth != null)
                {
                    return sixth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            #region Fields

            private readonly T7 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSeventh(T7 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                seventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                return seventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                if (seventh != null)
                {
                    seventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                if (seventh != null)
                {
                    return seventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            #region Fields

            private readonly T8 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEighth(T8 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                eighth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                return eighth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                if (eighth != null)
                {
                    eighth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                if (eighth != null)
                {
                    return eighth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            #region Fields

            private readonly T9 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithNinth(T9 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                ninth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                return ninth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                if (ninth != null)
                {
                    ninth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                if (ninth != null)
                {
                    return ninth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithTenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
        {
            #region Fields

            private readonly T10 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithTenth(T10 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                tenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                return tenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth)
            {
                if (tenth != null)
                {
                    tenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth)
            {
                if (tenth != null)
                {
                    return tenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            #region Fields

            private readonly T3 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThird(T3 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                third(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                return third(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                if (third != null)
                {
                    third(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                if (third != null)
                {
                    return third(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            #region Fields

            private readonly T4 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourth(T4 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                fourth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                return fourth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                if (fourth != null)
                {
                    fourth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                if (fourth != null)
                {
                    return fourth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            #region Fields

            private readonly T5 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFifth(T5 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                fifth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                return fifth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                if (fifth != null)
                {
                    fifth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                if (fifth != null)
                {
                    return fifth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            #region Fields

            private readonly T6 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSixth(T6 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                sixth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                return sixth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                if (sixth != null)
                {
                    sixth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                if (sixth != null)
                {
                    return sixth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            #region Fields

            private readonly T7 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSeventh(T7 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                seventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                return seventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                if (seventh != null)
                {
                    seventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                if (seventh != null)
                {
                    return seventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            #region Fields

            private readonly T8 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEighth(T8 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                eighth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                return eighth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                if (eighth != null)
                {
                    eighth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                if (eighth != null)
                {
                    return eighth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            #region Fields

            private readonly T9 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithNinth(T9 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                ninth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                return ninth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                if (ninth != null)
                {
                    ninth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                if (ninth != null)
                {
                    return ninth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithTenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            #region Fields

            private readonly T10 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithTenth(T10 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                tenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                return tenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                if (tenth != null)
                {
                    tenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                if (tenth != null)
                {
                    return tenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEleventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
        {
            #region Fields

            private readonly T11 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEleventh(T11 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                eleventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                return eleventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh)
            {
                if (eleventh != null)
                {
                    eleventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh)
            {
                if (eleventh != null)
                {
                    return eleventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            #region Fields

            private readonly T3 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThird(T3 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                third(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                return third(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                if (third != null)
                {
                    third(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                if (third != null)
                {
                    return third(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            #region Fields

            private readonly T4 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourth(T4 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                fourth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                return fourth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                if (fourth != null)
                {
                    fourth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                if (fourth != null)
                {
                    return fourth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            #region Fields

            private readonly T5 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFifth(T5 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                fifth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                return fifth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                if (fifth != null)
                {
                    fifth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                if (fifth != null)
                {
                    return fifth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            #region Fields

            private readonly T6 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSixth(T6 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                sixth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                return sixth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                if (sixth != null)
                {
                    sixth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                if (sixth != null)
                {
                    return sixth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            #region Fields

            private readonly T7 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSeventh(T7 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                seventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                return seventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                if (seventh != null)
                {
                    seventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                if (seventh != null)
                {
                    return seventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            #region Fields

            private readonly T8 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEighth(T8 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                eighth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                return eighth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                if (eighth != null)
                {
                    eighth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                if (eighth != null)
                {
                    return eighth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            #region Fields

            private readonly T9 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithNinth(T9 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                ninth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                return ninth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                if (ninth != null)
                {
                    ninth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                if (ninth != null)
                {
                    return ninth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithTenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            #region Fields

            private readonly T10 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithTenth(T10 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                tenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                return tenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                if (tenth != null)
                {
                    tenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                if (tenth != null)
                {
                    return tenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEleventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            #region Fields

            private readonly T11 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEleventh(T11 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                eleventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                return eleventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                if (eleventh != null)
                {
                    eleventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                if (eleventh != null)
                {
                    return eleventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithTwelfth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
        {
            #region Fields

            private readonly T12 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithTwelfth(T12 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                twelfth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                return twelfth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth)
            {
                if (twelfth != null)
                {
                    twelfth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth)
            {
                if (twelfth != null)
                {
                    return twelfth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            #region Fields

            private readonly T3 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThird(T3 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                third(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                return third(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                if (third != null)
                {
                    third(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                if (third != null)
                {
                    return third(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            #region Fields

            private readonly T4 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourth(T4 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                fourth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                return fourth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                if (fourth != null)
                {
                    fourth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                if (fourth != null)
                {
                    return fourth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            #region Fields

            private readonly T5 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFifth(T5 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                fifth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                return fifth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                if (fifth != null)
                {
                    fifth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                if (fifth != null)
                {
                    return fifth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            #region Fields

            private readonly T6 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSixth(T6 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                sixth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                return sixth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                if (sixth != null)
                {
                    sixth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                if (sixth != null)
                {
                    return sixth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            #region Fields

            private readonly T7 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSeventh(T7 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                seventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                return seventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                if (seventh != null)
                {
                    seventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                if (seventh != null)
                {
                    return seventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            #region Fields

            private readonly T8 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEighth(T8 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                eighth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                return eighth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                if (eighth != null)
                {
                    eighth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                if (eighth != null)
                {
                    return eighth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            #region Fields

            private readonly T9 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithNinth(T9 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                ninth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                return ninth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                if (ninth != null)
                {
                    ninth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                if (ninth != null)
                {
                    return ninth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithTenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            #region Fields

            private readonly T10 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithTenth(T10 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                tenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                return tenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                if (tenth != null)
                {
                    tenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                if (tenth != null)
                {
                    return tenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEleventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            #region Fields

            private readonly T11 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEleventh(T11 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                eleventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                return eleventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                if (eleventh != null)
                {
                    eleventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                if (eleventh != null)
                {
                    return eleventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithTwelfth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            #region Fields

            private readonly T12 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithTwelfth(T12 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                twelfth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                return twelfth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                if (twelfth != null)
                {
                    twelfth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                if (twelfth != null)
                {
                    return twelfth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThirteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
        {
            #region Fields

            private readonly T13 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThirteenth(T13 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                thirteenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                return thirteenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth)
            {
                if (thirteenth != null)
                {
                    thirteenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth)
            {
                if (thirteenth != null)
                {
                    return thirteenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            #region Fields

            private readonly T3 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThird(T3 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                third(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                return third(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                if (third != null)
                {
                    third(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                if (third != null)
                {
                    return third(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            #region Fields

            private readonly T4 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourth(T4 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                fourth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                return fourth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                if (fourth != null)
                {
                    fourth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                if (fourth != null)
                {
                    return fourth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            #region Fields

            private readonly T5 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFifth(T5 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                fifth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                return fifth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                if (fifth != null)
                {
                    fifth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                if (fifth != null)
                {
                    return fifth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            #region Fields

            private readonly T6 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSixth(T6 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                sixth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                return sixth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                if (sixth != null)
                {
                    sixth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                if (sixth != null)
                {
                    return sixth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            #region Fields

            private readonly T7 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSeventh(T7 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                seventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                return seventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                if (seventh != null)
                {
                    seventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                if (seventh != null)
                {
                    return seventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            #region Fields

            private readonly T8 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEighth(T8 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                eighth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                return eighth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                if (eighth != null)
                {
                    eighth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                if (eighth != null)
                {
                    return eighth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            #region Fields

            private readonly T9 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithNinth(T9 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                ninth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                return ninth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                if (ninth != null)
                {
                    ninth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                if (ninth != null)
                {
                    return ninth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithTenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            #region Fields

            private readonly T10 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithTenth(T10 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                tenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                return tenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                if (tenth != null)
                {
                    tenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                if (tenth != null)
                {
                    return tenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEleventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            #region Fields

            private readonly T11 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEleventh(T11 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                eleventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                return eleventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                if (eleventh != null)
                {
                    eleventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                if (eleventh != null)
                {
                    return eleventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithTwelfth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            #region Fields

            private readonly T12 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithTwelfth(T12 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                twelfth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                return twelfth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                if (twelfth != null)
                {
                    twelfth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                if (twelfth != null)
                {
                    return twelfth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThirteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            #region Fields

            private readonly T13 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThirteenth(T13 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                thirteenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                return thirteenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                if (thirteenth != null)
                {
                    thirteenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                if (thirteenth != null)
                {
                    return thirteenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
        {
            #region Fields

            private readonly T14 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourteenth(T14 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                fourteenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                return fourteenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth)
            {
                if (fourteenth != null)
                {
                    fourteenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth)
            {
                if (fourteenth != null)
                {
                    return fourteenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T3 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThird(T3 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                third(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return third(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (third != null)
                {
                    third(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (third != null)
                {
                    return third(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T4 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourth(T4 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                fourth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return fourth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (fourth != null)
                {
                    fourth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (fourth != null)
                {
                    return fourth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T5 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFifth(T5 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                fifth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return fifth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (fifth != null)
                {
                    fifth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (fifth != null)
                {
                    return fifth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T6 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSixth(T6 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                sixth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return sixth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (sixth != null)
                {
                    sixth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (sixth != null)
                {
                    return sixth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T7 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSeventh(T7 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                seventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return seventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (seventh != null)
                {
                    seventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (seventh != null)
                {
                    return seventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T8 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEighth(T8 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                eighth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return eighth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (eighth != null)
                {
                    eighth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (eighth != null)
                {
                    return eighth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T9 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithNinth(T9 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                ninth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return ninth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (ninth != null)
                {
                    ninth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (ninth != null)
                {
                    return ninth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithTenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T10 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithTenth(T10 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                tenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return tenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (tenth != null)
                {
                    tenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (tenth != null)
                {
                    return tenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEleventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T11 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEleventh(T11 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                eleventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return eleventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (eleventh != null)
                {
                    eleventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (eleventh != null)
                {
                    return eleventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithTwelfth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T12 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithTwelfth(T12 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                twelfth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return twelfth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (twelfth != null)
                {
                    twelfth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (twelfth != null)
                {
                    return twelfth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThirteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T13 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThirteenth(T13 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                thirteenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return thirteenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (thirteenth != null)
                {
                    thirteenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (thirteenth != null)
                {
                    return thirteenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T14 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourteenth(T14 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                fourteenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return fourteenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (fourteenth != null)
                {
                    fourteenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (fourteenth != null)
                {
                    return fourteenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFifteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
        {
            #region Fields

            private readonly T15 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFifteenth(T15 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                fifteenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                return fifteenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth)
            {
                if (fifteenth != null)
                {
                    fifteenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth)
            {
                if (fifteenth != null)
                {
                    return fifteenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFirst<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T1 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFirst(T1 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                first(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return first(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (first != null)
                {
                    first(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (first != null)
                {
                    return first(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSecond<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T2 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSecond(T2 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                second(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return second(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (second != null)
                {
                    second(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (second != null)
                {
                    return second(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThird<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T3 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThird(T3 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                third(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return third(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (third != null)
                {
                    third(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (third != null)
                {
                    return third(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T4 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourth(T4 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                fourth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return fourth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (fourth != null)
                {
                    fourth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (fourth != null)
                {
                    return fourth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFifth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T5 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFifth(T5 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                fifth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return fifth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (fifth != null)
                {
                    fifth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (fifth != null)
                {
                    return fifth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSixth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T6 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSixth(T6 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                sixth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return sixth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (sixth != null)
                {
                    sixth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (sixth != null)
                {
                    return sixth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSeventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T7 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSeventh(T7 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                seventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return seventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (seventh != null)
                {
                    seventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (seventh != null)
                {
                    return seventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEighth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T8 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEighth(T8 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                eighth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return eighth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (eighth != null)
                {
                    eighth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (eighth != null)
                {
                    return eighth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithNinth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T9 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithNinth(T9 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                ninth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return ninth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (ninth != null)
                {
                    ninth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (ninth != null)
                {
                    return ninth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithTenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T10 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithTenth(T10 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                tenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return tenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (tenth != null)
                {
                    tenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (tenth != null)
                {
                    return tenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithEleventh<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T11 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithEleventh(T11 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                eleventh(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return eleventh(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (eleventh != null)
                {
                    eleventh(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (eleventh != null)
                {
                    return eleventh(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithTwelfth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T12 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithTwelfth(T12 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                twelfth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return twelfth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (twelfth != null)
                {
                    twelfth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (twelfth != null)
                {
                    return twelfth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithThirteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T13 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithThirteenth(T13 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                thirteenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return thirteenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (thirteenth != null)
                {
                    thirteenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (thirteenth != null)
                {
                    return thirteenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFourteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T14 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFourteenth(T14 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                fourteenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return fourteenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (fourteenth != null)
                {
                    fourteenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (fourteenth != null)
                {
                    return fourteenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithFifteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T15 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithFifteenth(T15 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                fifteenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return fifteenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (fifteenth != null)
                {
                    fifteenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (fifteenth != null)
                {
                    return fifteenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantWithCommonClassWithSixteenth<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
            where T1 : T
            where T2 : T
            where T3 : T
            where T4 : T
            where T5 : T
            where T6 : T
            where T7 : T
            where T8 : T
            where T9 : T
            where T10 : T
            where T11 : T
            where T12 : T
            where T13 : T
            where T14 : T
            where T15 : T
            where T16 : T
        {
            #region Fields

            private readonly T16 value;

            #endregion

            #region Constructors and Destructors

            internal VariantWithCommonClassWithSixteenth(T16 value)
            {
                this.value = value;
            }

            #endregion

            #region Explicit Interface Properties

            T IVariantWithCommon<T>.Value
            {
                get
                {
                    return ReferenceEquals(this.value, null) ? default(T) : this.value;
                }
            }

            #endregion

            #region Explicit Interface Methods

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match(Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                sixteenth(this.value);
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Match<TResult>(Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                return sixteenth(this.value);
            }

            void IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome(Action otherwise, Action<T1> first, Action<T2> second, Action<T3> third, Action<T4> fourth, Action<T5> fifth, Action<T6> sixth, Action<T7> seventh, Action<T8> eighth, Action<T9> ninth, Action<T10> tenth, Action<T11> eleventh, Action<T12> twelfth, Action<T13> thirteenth, Action<T14> fourteenth, Action<T15> fifteenth, Action<T16> sixteenth)
            {
                if (sixteenth != null)
                {
                    sixteenth(this.value);
                }
                else
                {
                    otherwise();
                }
            }

            TResult IVariantWithCommon<T, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.MatchSome<TResult>(Func<TResult> otherwise, Func<T1, TResult> first, Func<T2, TResult> second, Func<T3, TResult> third, Func<T4, TResult> fourth, Func<T5, TResult> fifth, Func<T6, TResult> sixth, Func<T7, TResult> seventh, Func<T8, TResult> eighth, Func<T9, TResult> ninth, Func<T10, TResult> tenth, Func<T11, TResult> eleventh, Func<T12, TResult> twelfth, Func<T13, TResult> thirteenth, Func<T14, TResult> fourteenth, Func<T15, TResult> fifteenth, Func<T16, TResult> sixteenth)
            {
                if (sixteenth != null)
                {
                    return sixteenth(this.value);
                }

                return otherwise();
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2> : VariantWithCommonClassWithFirst<object, T1, T2>, IVariant<T1, T2>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2> : VariantWithCommonClassWithSecond<object, T1, T2>, IVariant<T1, T2>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2, T3> : VariantWithCommonClassWithFirst<object, T1, T2, T3>, IVariant<T1, T2, T3>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2, T3> : VariantWithCommonClassWithSecond<object, T1, T2, T3>, IVariant<T1, T2, T3>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThird<T1, T2, T3> : VariantWithCommonClassWithThird<object, T1, T2, T3>, IVariant<T1, T2, T3>
        {
            #region Constructors and Destructors

            internal VariantClassWithThird(T3 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2, T3, T4> : VariantWithCommonClassWithFirst<object, T1, T2, T3, T4>, IVariant<T1, T2, T3, T4>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2, T3, T4> : VariantWithCommonClassWithSecond<object, T1, T2, T3, T4>, IVariant<T1, T2, T3, T4>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThird<T1, T2, T3, T4> : VariantWithCommonClassWithThird<object, T1, T2, T3, T4>, IVariant<T1, T2, T3, T4>
        {
            #region Constructors and Destructors

            internal VariantClassWithThird(T3 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourth<T1, T2, T3, T4> : VariantWithCommonClassWithFourth<object, T1, T2, T3, T4>, IVariant<T1, T2, T3, T4>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourth(T4 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2, T3, T4, T5> : VariantWithCommonClassWithFirst<object, T1, T2, T3, T4, T5>, IVariant<T1, T2, T3, T4, T5>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2, T3, T4, T5> : VariantWithCommonClassWithSecond<object, T1, T2, T3, T4, T5>, IVariant<T1, T2, T3, T4, T5>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThird<T1, T2, T3, T4, T5> : VariantWithCommonClassWithThird<object, T1, T2, T3, T4, T5>, IVariant<T1, T2, T3, T4, T5>
        {
            #region Constructors and Destructors

            internal VariantClassWithThird(T3 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourth<T1, T2, T3, T4, T5> : VariantWithCommonClassWithFourth<object, T1, T2, T3, T4, T5>, IVariant<T1, T2, T3, T4, T5>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourth(T4 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFifth<T1, T2, T3, T4, T5> : VariantWithCommonClassWithFifth<object, T1, T2, T3, T4, T5>, IVariant<T1, T2, T3, T4, T5>
        {
            #region Constructors and Destructors

            internal VariantClassWithFifth(T5 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2, T3, T4, T5, T6> : VariantWithCommonClassWithFirst<object, T1, T2, T3, T4, T5, T6>, IVariant<T1, T2, T3, T4, T5, T6>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2, T3, T4, T5, T6> : VariantWithCommonClassWithSecond<object, T1, T2, T3, T4, T5, T6>, IVariant<T1, T2, T3, T4, T5, T6>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThird<T1, T2, T3, T4, T5, T6> : VariantWithCommonClassWithThird<object, T1, T2, T3, T4, T5, T6>, IVariant<T1, T2, T3, T4, T5, T6>
        {
            #region Constructors and Destructors

            internal VariantClassWithThird(T3 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourth<T1, T2, T3, T4, T5, T6> : VariantWithCommonClassWithFourth<object, T1, T2, T3, T4, T5, T6>, IVariant<T1, T2, T3, T4, T5, T6>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourth(T4 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFifth<T1, T2, T3, T4, T5, T6> : VariantWithCommonClassWithFifth<object, T1, T2, T3, T4, T5, T6>, IVariant<T1, T2, T3, T4, T5, T6>
        {
            #region Constructors and Destructors

            internal VariantClassWithFifth(T5 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSixth<T1, T2, T3, T4, T5, T6> : VariantWithCommonClassWithSixth<object, T1, T2, T3, T4, T5, T6>, IVariant<T1, T2, T3, T4, T5, T6>
        {
            #region Constructors and Destructors

            internal VariantClassWithSixth(T6 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7> : VariantWithCommonClassWithFirst<object, T1, T2, T3, T4, T5, T6, T7>, IVariant<T1, T2, T3, T4, T5, T6, T7>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7> : VariantWithCommonClassWithSecond<object, T1, T2, T3, T4, T5, T6, T7>, IVariant<T1, T2, T3, T4, T5, T6, T7>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7> : VariantWithCommonClassWithThird<object, T1, T2, T3, T4, T5, T6, T7>, IVariant<T1, T2, T3, T4, T5, T6, T7>
        {
            #region Constructors and Destructors

            internal VariantClassWithThird(T3 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7> : VariantWithCommonClassWithFourth<object, T1, T2, T3, T4, T5, T6, T7>, IVariant<T1, T2, T3, T4, T5, T6, T7>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourth(T4 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7> : VariantWithCommonClassWithFifth<object, T1, T2, T3, T4, T5, T6, T7>, IVariant<T1, T2, T3, T4, T5, T6, T7>
        {
            #region Constructors and Destructors

            internal VariantClassWithFifth(T5 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7> : VariantWithCommonClassWithSixth<object, T1, T2, T3, T4, T5, T6, T7>, IVariant<T1, T2, T3, T4, T5, T6, T7>
        {
            #region Constructors and Destructors

            internal VariantClassWithSixth(T6 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7> : VariantWithCommonClassWithSeventh<object, T1, T2, T3, T4, T5, T6, T7>, IVariant<T1, T2, T3, T4, T5, T6, T7>
        {
            #region Constructors and Destructors

            internal VariantClassWithSeventh(T7 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8> : VariantWithCommonClassWithFirst<object, T1, T2, T3, T4, T5, T6, T7, T8>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8> : VariantWithCommonClassWithSecond<object, T1, T2, T3, T4, T5, T6, T7, T8>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8> : VariantWithCommonClassWithThird<object, T1, T2, T3, T4, T5, T6, T7, T8>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8>
        {
            #region Constructors and Destructors

            internal VariantClassWithThird(T3 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8> : VariantWithCommonClassWithFourth<object, T1, T2, T3, T4, T5, T6, T7, T8>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourth(T4 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8> : VariantWithCommonClassWithFifth<object, T1, T2, T3, T4, T5, T6, T7, T8>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8>
        {
            #region Constructors and Destructors

            internal VariantClassWithFifth(T5 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8> : VariantWithCommonClassWithSixth<object, T1, T2, T3, T4, T5, T6, T7, T8>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8>
        {
            #region Constructors and Destructors

            internal VariantClassWithSixth(T6 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8> : VariantWithCommonClassWithSeventh<object, T1, T2, T3, T4, T5, T6, T7, T8>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8>
        {
            #region Constructors and Destructors

            internal VariantClassWithSeventh(T7 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8> : VariantWithCommonClassWithEighth<object, T1, T2, T3, T4, T5, T6, T7, T8>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8>
        {
            #region Constructors and Destructors

            internal VariantClassWithEighth(T8 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9> : VariantWithCommonClassWithFirst<object, T1, T2, T3, T4, T5, T6, T7, T8, T9>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9> : VariantWithCommonClassWithSecond<object, T1, T2, T3, T4, T5, T6, T7, T8, T9>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9> : VariantWithCommonClassWithThird<object, T1, T2, T3, T4, T5, T6, T7, T8, T9>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            #region Constructors and Destructors

            internal VariantClassWithThird(T3 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9> : VariantWithCommonClassWithFourth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourth(T4 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9> : VariantWithCommonClassWithFifth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            #region Constructors and Destructors

            internal VariantClassWithFifth(T5 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9> : VariantWithCommonClassWithSixth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            #region Constructors and Destructors

            internal VariantClassWithSixth(T6 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9> : VariantWithCommonClassWithSeventh<object, T1, T2, T3, T4, T5, T6, T7, T8, T9>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            #region Constructors and Destructors

            internal VariantClassWithSeventh(T7 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9> : VariantWithCommonClassWithEighth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            #region Constructors and Destructors

            internal VariantClassWithEighth(T8 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9> : VariantWithCommonClassWithNinth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            #region Constructors and Destructors

            internal VariantClassWithNinth(T9 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : VariantWithCommonClassWithFirst<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : VariantWithCommonClassWithSecond<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : VariantWithCommonClassWithThird<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            #region Constructors and Destructors

            internal VariantClassWithThird(T3 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : VariantWithCommonClassWithFourth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourth(T4 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : VariantWithCommonClassWithFifth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            #region Constructors and Destructors

            internal VariantClassWithFifth(T5 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : VariantWithCommonClassWithSixth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            #region Constructors and Destructors

            internal VariantClassWithSixth(T6 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : VariantWithCommonClassWithSeventh<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            #region Constructors and Destructors

            internal VariantClassWithSeventh(T7 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : VariantWithCommonClassWithEighth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            #region Constructors and Destructors

            internal VariantClassWithEighth(T8 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : VariantWithCommonClassWithNinth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            #region Constructors and Destructors

            internal VariantClassWithNinth(T9 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithTenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : VariantWithCommonClassWithTenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            #region Constructors and Destructors

            internal VariantClassWithTenth(T10 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : VariantWithCommonClassWithFirst<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : VariantWithCommonClassWithSecond<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : VariantWithCommonClassWithThird<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            #region Constructors and Destructors

            internal VariantClassWithThird(T3 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : VariantWithCommonClassWithFourth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourth(T4 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : VariantWithCommonClassWithFifth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            #region Constructors and Destructors

            internal VariantClassWithFifth(T5 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : VariantWithCommonClassWithSixth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            #region Constructors and Destructors

            internal VariantClassWithSixth(T6 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : VariantWithCommonClassWithSeventh<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            #region Constructors and Destructors

            internal VariantClassWithSeventh(T7 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : VariantWithCommonClassWithEighth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            #region Constructors and Destructors

            internal VariantClassWithEighth(T8 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : VariantWithCommonClassWithNinth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            #region Constructors and Destructors

            internal VariantClassWithNinth(T9 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithTenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : VariantWithCommonClassWithTenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            #region Constructors and Destructors

            internal VariantClassWithTenth(T10 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : VariantWithCommonClassWithEleventh<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            #region Constructors and Destructors

            internal VariantClassWithEleventh(T11 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : VariantWithCommonClassWithFirst<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : VariantWithCommonClassWithSecond<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : VariantWithCommonClassWithThird<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            #region Constructors and Destructors

            internal VariantClassWithThird(T3 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : VariantWithCommonClassWithFourth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourth(T4 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : VariantWithCommonClassWithFifth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            #region Constructors and Destructors

            internal VariantClassWithFifth(T5 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : VariantWithCommonClassWithSixth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            #region Constructors and Destructors

            internal VariantClassWithSixth(T6 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : VariantWithCommonClassWithSeventh<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            #region Constructors and Destructors

            internal VariantClassWithSeventh(T7 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : VariantWithCommonClassWithEighth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            #region Constructors and Destructors

            internal VariantClassWithEighth(T8 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : VariantWithCommonClassWithNinth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            #region Constructors and Destructors

            internal VariantClassWithNinth(T9 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithTenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : VariantWithCommonClassWithTenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            #region Constructors and Destructors

            internal VariantClassWithTenth(T10 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : VariantWithCommonClassWithEleventh<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            #region Constructors and Destructors

            internal VariantClassWithEleventh(T11 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithTwelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : VariantWithCommonClassWithTwelfth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            #region Constructors and Destructors

            internal VariantClassWithTwelfth(T12 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : VariantWithCommonClassWithFirst<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : VariantWithCommonClassWithSecond<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : VariantWithCommonClassWithThird<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            #region Constructors and Destructors

            internal VariantClassWithThird(T3 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : VariantWithCommonClassWithFourth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourth(T4 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : VariantWithCommonClassWithFifth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            #region Constructors and Destructors

            internal VariantClassWithFifth(T5 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : VariantWithCommonClassWithSixth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            #region Constructors and Destructors

            internal VariantClassWithSixth(T6 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : VariantWithCommonClassWithSeventh<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            #region Constructors and Destructors

            internal VariantClassWithSeventh(T7 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : VariantWithCommonClassWithEighth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            #region Constructors and Destructors

            internal VariantClassWithEighth(T8 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : VariantWithCommonClassWithNinth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            #region Constructors and Destructors

            internal VariantClassWithNinth(T9 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithTenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : VariantWithCommonClassWithTenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            #region Constructors and Destructors

            internal VariantClassWithTenth(T10 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : VariantWithCommonClassWithEleventh<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            #region Constructors and Destructors

            internal VariantClassWithEleventh(T11 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithTwelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : VariantWithCommonClassWithTwelfth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            #region Constructors and Destructors

            internal VariantClassWithTwelfth(T12 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThirteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : VariantWithCommonClassWithThirteenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            #region Constructors and Destructors

            internal VariantClassWithThirteenth(T13 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : VariantWithCommonClassWithFirst<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : VariantWithCommonClassWithSecond<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : VariantWithCommonClassWithThird<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            #region Constructors and Destructors

            internal VariantClassWithThird(T3 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : VariantWithCommonClassWithFourth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourth(T4 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : VariantWithCommonClassWithFifth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            #region Constructors and Destructors

            internal VariantClassWithFifth(T5 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : VariantWithCommonClassWithSixth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            #region Constructors and Destructors

            internal VariantClassWithSixth(T6 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : VariantWithCommonClassWithSeventh<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            #region Constructors and Destructors

            internal VariantClassWithSeventh(T7 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : VariantWithCommonClassWithEighth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            #region Constructors and Destructors

            internal VariantClassWithEighth(T8 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : VariantWithCommonClassWithNinth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            #region Constructors and Destructors

            internal VariantClassWithNinth(T9 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithTenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : VariantWithCommonClassWithTenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            #region Constructors and Destructors

            internal VariantClassWithTenth(T10 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : VariantWithCommonClassWithEleventh<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            #region Constructors and Destructors

            internal VariantClassWithEleventh(T11 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithTwelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : VariantWithCommonClassWithTwelfth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            #region Constructors and Destructors

            internal VariantClassWithTwelfth(T12 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThirteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : VariantWithCommonClassWithThirteenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            #region Constructors and Destructors

            internal VariantClassWithThirteenth(T13 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : VariantWithCommonClassWithFourteenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourteenth(T14 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithFirst<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithSecond<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithThird<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithThird(T3 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithFourth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourth(T4 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithFifth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithFifth(T5 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithSixth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithSixth(T6 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithSeventh<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithSeventh(T7 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithEighth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithEighth(T8 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithNinth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithNinth(T9 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithTenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithTenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithTenth(T10 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithEleventh<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithEleventh(T11 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithTwelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithTwelfth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithTwelfth(T12 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThirteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithThirteenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithThirteenth(T13 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithFourteenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourteenth(T14 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFifteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : VariantWithCommonClassWithFifteenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            #region Constructors and Destructors

            internal VariantClassWithFifteenth(T15 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFirst<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithFirst<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithFirst(T1 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSecond<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithSecond<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithSecond(T2 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThird<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithThird<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithThird(T3 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithFourth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourth(T4 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFifth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithFifth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithFifth(T5 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSixth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithSixth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithSixth(T6 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSeventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithSeventh<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithSeventh(T7 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEighth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithEighth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithEighth(T8 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithNinth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithNinth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithNinth(T9 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithTenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithTenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithTenth(T10 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithEleventh<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithEleventh<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithEleventh(T11 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithTwelfth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithTwelfth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithTwelfth(T12 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithThirteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithThirteenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithThirteenth(T13 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFourteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithFourteenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithFourteenth(T14 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithFifteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithFifteenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithFifteenth(T15 value)
                : base(value)
            {
            }

            #endregion
        }

        private class VariantClassWithSixteenth<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : VariantWithCommonClassWithSixteenth<object, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, IVariant<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            #region Constructors and Destructors

            internal VariantClassWithSixteenth(T16 value)
                : base(value)
            {
            }

            #endregion
        }
    }
}