<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="TemplateFileManager.ttinclude" #><#@ include file="Utilities.ttinclude" #><#@ output extension=".cs" #>
<#
TemplateFileManager manager = TemplateFileManager.Create(this);
for(int currentNumberOfParameters = 2; currentNumberOfParameters <= MaximumNumberOfParameters; currentNumberOfParameters++)
{
    manager.StartNewFile("IVariant{" + string.Join(",", Enumerable.Range(1, currentNumberOfParameters).Select(n => "T" + n)) + "}.cs");
#>
#region License

// --------------------------------------------------------------------------------------------------------------------
// <copyright file="IVariant{<#= string.Join(",", Enumerable.Range(1, currentNumberOfParameters).Select(n => "T" + n)) #>}.cs" company="MorseCode Software">
// Copyright (c) 2015 MorseCode Software
// </copyright>
// <summary>
// The MIT License (MIT)
// 
// Copyright (c) 2015 MorseCode Software
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------
#endregion

namespace MorseCode.Functional
{
    using System.Diagnostics.Contracts;

    /// <summary>
    /// An interface representing a variant (or discriminated union) type which may hold one value of any of the types <#= string.Join(", ", Enumerable.Range(1, currentNumberOfParameters).Select(n => (n == currentNumberOfParameters ? "or " : string.Empty) + "<typeparamref name=\"T" + n + "\"/>")) #>.
    /// </summary>
<# Enumerable.Range(1, currentNumberOfParameters).ToList().ForEach(n => {#>
    /// <typeparam name="T<#= n #>">
    /// The type of the <#= this.GetOrdinalString(n) #> possible value of the variant (or discriminated union).
    /// </typeparam>
<# }); #>
    [ContractClass(typeof(VariantInterfaceContract<<#= string.Join(string.Empty, Enumerable.Range(1, currentNumberOfParameters - 1).Select(_ => ",")) #>>))]
    public interface IVariant<<#= string.Join(", ", Enumerable.Range(1, currentNumberOfParameters).Select(n => "out T" + n)) #>> : IVariantWithCommon<object, <#= string.Join(", ", Enumerable.Range(1, currentNumberOfParameters).Select(n => "T" + n)) #>>
    {
    }
}<#
}
manager.Process();
#>